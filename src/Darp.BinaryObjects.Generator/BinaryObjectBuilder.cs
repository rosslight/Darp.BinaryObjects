namespace Darp.BinaryObjects.Generator;

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

internal sealed class BinaryObjectBuilder
{
    public StringBuilder StringBuilder { get; }
    private readonly INamedTypeSymbol _symbol;
    private readonly TypeDeclarationSyntax _syntax;
    private readonly ISymbol[] _fieldSymbols;

    public List<Diagnostic> Diagnostics { get; } = [];

    public BinaryObjectBuilder(INamedTypeSymbol symbol, TypeDeclarationSyntax syntax)
    {
        _symbol = symbol;
        _syntax = syntax;
        StringBuilder = new StringBuilder();
        _fieldSymbols = _symbol
            .GetMembers()
            .Where(x => x.Kind is SymbolKind.Field or SymbolKind.Property)
            .Where(x => !x.IsImplicitlyDeclared)
            .ToArray();
    }

    public void AddFileHeader()
    {
        StringBuilder.Append(
            """
            // <auto-generated/>
            #nullable enable

            """
        );
    }

    public bool TryAddTypeDeclaration()
    {
        // Add xml docs
        // Add actual type declaration
        StringBuilder.AppendLine($"{_syntax.Modifiers} {_syntax.Keyword} {_syntax.Identifier}");
        return true;
    }

    public override string ToString() => StringBuilder.ToString().Replace("\r", "");
}
