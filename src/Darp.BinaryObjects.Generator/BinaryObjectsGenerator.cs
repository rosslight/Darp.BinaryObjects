namespace Darp.BinaryObjects.Generator;

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

[Generator]
public class BinaryObjectsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<Temp> attributes = context
            .SyntaxProvider.ForAttributeWithMetadataName(
                "Darp.BinaryObjects.BinaryObjectAttribute",
                Predicate,
                GetEnumInfo
            )
            .Collect()
            .SelectMany((x, _) => x.Distinct());
        // var attributes = context.SyntaxProvider.CreateSyntaxProvider(
        //     static (x, _) => x is TypeDeclarationSyntax,
        //     (syntaxContext, _) => new Temp(null!)
        // );

        // generate a class that contains their values as const strings
        context.RegisterSourceOutput(
            attributes,
            (spc, state) =>
            {
                spc.AddSource(
                    $"{state.TargetSymbol.Name}.g.cs",
                    SourceText.From(
                        $$"""
// <auto-generated/>
#nullable enable

{{state.TargetSyntax.Modifiers}} {{state.TargetSyntax.Keyword}} {{state.TargetSyntax.Identifier}}
{

}

""".Replace("\r", ""),
                        Encoding.UTF8,
                        SourceHashAlgorithm.Sha256
                    )
                );
            }
        );
    }

    private static bool Predicate(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        return syntaxNode is TypeDeclarationSyntax;
    }

    private static Temp GetEnumInfo(GeneratorAttributeSyntaxContext context, CancellationToken cancellationToken)
    {
        var type = (INamedTypeSymbol)context.TargetSymbol;
        var node = (TypeDeclarationSyntax)context.TargetNode;
        return new Temp(type, node);
    }
}

internal sealed record Temp(INamedTypeSymbol TargetSymbol, TypeDeclarationSyntax TargetSyntax);
