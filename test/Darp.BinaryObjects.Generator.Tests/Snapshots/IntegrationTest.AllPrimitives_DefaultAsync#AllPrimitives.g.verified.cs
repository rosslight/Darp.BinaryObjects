//HintName: AllPrimitives.g.cs
// <auto-generated/>
#nullable enable

using BinaryHelpers = global::Darp.BinaryObjects.BinaryHelpers;
using NotNullWhenAttribute = global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute;

/// <remarks> <list type="table">
/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>
/// <item> <term><see cref="ValueBool"/></term> <description>1</description> </item>
/// <item> <term><see cref="ValueSByte"/></term> <description>1</description> </item>
/// <item> <term><see cref="ValueShort"/></term> <description>2</description> </item>
/// <item> <term><see cref="ValueHalf"/></term> <description>2</description> </item>
/// <item> <term><see cref="ValueInt"/></term> <description>4</description> </item>
/// <item> <term><see cref="ValueFloat"/></term> <description>4</description> </item>
/// <item> <term><see cref="ValueLong"/></term> <description>8</description> </item>
/// <item> <term><see cref="ValueInt128"/></term> <description>16</description> </item>
/// <item> <term><see cref="ValueUInt128"/></term> <description>16</description> </item>
/// <item> <term><see cref="ValueULong"/></term> <description>8</description> </item>
/// <item> <term><see cref="ValueDouble"/></term> <description>8</description> </item>
/// <item> <term><see cref="ValueUInt"/></term> <description>4</description> </item>
/// <item> <term><see cref="ValueUShort"/></term> <description>2</description> </item>
/// <item> <term><see cref="ValueByte"/></term> <description>1</description> </item>
/// <item> <term> --- </term> <description>77</description> </item>
/// </list> </remarks>
public sealed partial record AllPrimitives : global::Darp.BinaryObjects.IWritable, global::Darp.BinaryObjects.ISpanReadable<AllPrimitives>
{
    /// <inheritdoc />
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public int GetByteCount() => 77;

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 77)
            return false;
        BinaryHelpers.WriteBool(destination[0..], this.ValueBool);
        BinaryHelpers.WriteInt8(destination[1..], this.ValueSByte);
        BinaryHelpers.WriteInt16LittleEndian(destination[2..], this.ValueShort);
        BinaryHelpers.WriteHalfLittleEndian(destination[4..], this.ValueHalf);
        BinaryHelpers.WriteInt32LittleEndian(destination[6..], this.ValueInt);
        BinaryHelpers.WriteSingleLittleEndian(destination[10..], this.ValueFloat);
        BinaryHelpers.WriteInt64LittleEndian(destination[14..], this.ValueLong);
        BinaryHelpers.WriteInt128LittleEndian(destination[22..], this.ValueInt128);
        BinaryHelpers.WriteUInt128LittleEndian(destination[38..], this.ValueUInt128);
        BinaryHelpers.WriteUInt64LittleEndian(destination[54..], this.ValueULong);
        BinaryHelpers.WriteDoubleLittleEndian(destination[62..], this.ValueDouble);
        BinaryHelpers.WriteUInt32LittleEndian(destination[70..], this.ValueUInt);
        BinaryHelpers.WriteUInt16LittleEndian(destination[74..], this.ValueUShort);
        BinaryHelpers.WriteUInt8(destination[76..], this.ValueByte);
        bytesWritten += 77;

        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 77)
            return false;
        BinaryHelpers.WriteBool(destination[0..], this.ValueBool);
        BinaryHelpers.WriteInt8(destination[1..], this.ValueSByte);
        BinaryHelpers.WriteInt16BigEndian(destination[2..], this.ValueShort);
        BinaryHelpers.WriteHalfBigEndian(destination[4..], this.ValueHalf);
        BinaryHelpers.WriteInt32BigEndian(destination[6..], this.ValueInt);
        BinaryHelpers.WriteSingleBigEndian(destination[10..], this.ValueFloat);
        BinaryHelpers.WriteInt64BigEndian(destination[14..], this.ValueLong);
        BinaryHelpers.WriteInt128BigEndian(destination[22..], this.ValueInt128);
        BinaryHelpers.WriteUInt128BigEndian(destination[38..], this.ValueUInt128);
        BinaryHelpers.WriteUInt64BigEndian(destination[54..], this.ValueULong);
        BinaryHelpers.WriteDoubleBigEndian(destination[62..], this.ValueDouble);
        BinaryHelpers.WriteUInt32BigEndian(destination[70..], this.ValueUInt);
        BinaryHelpers.WriteUInt16BigEndian(destination[74..], this.ValueUShort);
        BinaryHelpers.WriteUInt8(destination[76..], this.ValueByte);
        bytesWritten += 77;

        return true;
    }

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [NotNullWhen(true)] out AllPrimitives? value) => TryReadLittleEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [NotNullWhen(true)] out AllPrimitives? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 77)
            return false;
        var ___readValueBool = BinaryHelpers.ReadBool(source[0..]);
        var ___readValueSByte = BinaryHelpers.ReadInt8(source[1..]);
        var ___readValueShort = BinaryHelpers.ReadInt16LittleEndian(source[2..]);
        var ___readValueHalf = BinaryHelpers.ReadHalfLittleEndian(source[4..]);
        var ___readValueInt = BinaryHelpers.ReadInt32LittleEndian(source[6..]);
        var ___readValueFloat = BinaryHelpers.ReadSingleLittleEndian(source[10..]);
        var ___readValueLong = BinaryHelpers.ReadInt64LittleEndian(source[14..]);
        var ___readValueInt128 = BinaryHelpers.ReadInt128LittleEndian(source[22..]);
        var ___readValueUInt128 = BinaryHelpers.ReadUInt128LittleEndian(source[38..]);
        var ___readValueULong = BinaryHelpers.ReadUInt64LittleEndian(source[54..]);
        var ___readValueDouble = BinaryHelpers.ReadDoubleLittleEndian(source[62..]);
        var ___readValueUInt = BinaryHelpers.ReadUInt32LittleEndian(source[70..]);
        var ___readValueUShort = BinaryHelpers.ReadUInt16LittleEndian(source[74..]);
        var ___readValueByte = BinaryHelpers.ReadUInt8(source[76..]);
        bytesRead += 77;

        value = new AllPrimitives(___readValueBool, ___readValueSByte, ___readValueShort, ___readValueHalf, ___readValueInt, ___readValueFloat, ___readValueLong, ___readValueInt128, ___readValueUInt128, ___readValueULong, ___readValueDouble, ___readValueUInt, ___readValueUShort, ___readValueByte);
        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [NotNullWhen(true)] out AllPrimitives? value) => TryReadBigEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [NotNullWhen(true)] out AllPrimitives? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 77)
            return false;
        var ___readValueBool = BinaryHelpers.ReadBool(source[0..]);
        var ___readValueSByte = BinaryHelpers.ReadInt8(source[1..]);
        var ___readValueShort = BinaryHelpers.ReadInt16BigEndian(source[2..]);
        var ___readValueHalf = BinaryHelpers.ReadHalfBigEndian(source[4..]);
        var ___readValueInt = BinaryHelpers.ReadInt32BigEndian(source[6..]);
        var ___readValueFloat = BinaryHelpers.ReadSingleBigEndian(source[10..]);
        var ___readValueLong = BinaryHelpers.ReadInt64BigEndian(source[14..]);
        var ___readValueInt128 = BinaryHelpers.ReadInt128BigEndian(source[22..]);
        var ___readValueUInt128 = BinaryHelpers.ReadUInt128BigEndian(source[38..]);
        var ___readValueULong = BinaryHelpers.ReadUInt64BigEndian(source[54..]);
        var ___readValueDouble = BinaryHelpers.ReadDoubleBigEndian(source[62..]);
        var ___readValueUInt = BinaryHelpers.ReadUInt32BigEndian(source[70..]);
        var ___readValueUShort = BinaryHelpers.ReadUInt16BigEndian(source[74..]);
        var ___readValueByte = BinaryHelpers.ReadUInt8(source[76..]);
        bytesRead += 77;

        value = new AllPrimitives(___readValueBool, ___readValueSByte, ___readValueShort, ___readValueHalf, ___readValueInt, ___readValueFloat, ___readValueLong, ___readValueInt128, ___readValueUInt128, ___readValueULong, ___readValueDouble, ___readValueUInt, ___readValueUShort, ___readValueByte);
        return true;
    }
}
