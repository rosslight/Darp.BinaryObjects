//HintName: BinaryObjectsGenerator.g.cs
// <auto-generated/>
#nullable enable

/// <remarks> <list type="table">
/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>
/// <item> <term><see cref="ValueSByte"/></term> <description>1</description> </item>
/// <item> <term><see cref="ValueByte"/></term> <description>1</description> </item>
/// <item> <term><see cref="ValueShort"/></term> <description>2</description> </item>
/// <item> <term><see cref="ValueUShort"/></term> <description>2</description> </item>
/// <item> <term><see cref="ValueInt"/></term> <description>4</description> </item>
/// <item> <term><see cref="ValueUInt"/></term> <description>4</description> </item>
/// <item> <term><see cref="ValueSLong"/></term> <description>8</description> </item>
/// <item> <term><see cref="ValueULong"/></term> <description>8</description> </item>
/// <item> <term> --- </term> <description>30</description> </item>
/// </list> </remarks>
[global::Darp.BinaryObjects.BinaryConstant(30)]
public sealed partial record TestObject : global::Darp.BinaryObjects.IBinaryObject<TestObject>
{
    /// <inheritdoc />
    [global::System.Diagnostics.Contracts.Pure]
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public int GetByteCount() => 30;

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 30)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt8(destination[0..1], (sbyte) this.ValueSByte);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..2], (byte) this.ValueByte);
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt16LittleEndian(destination[2..4], (short) this.ValueShort);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt16LittleEndian(destination[4..6], (ushort) this.ValueUShort);
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt32LittleEndian(destination[6..10], (int) this.ValueInt);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt32LittleEndian(destination[10..14], (uint) this.ValueUInt);
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt64LittleEndian(destination[14..22], (long) this.ValueSLong);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt64LittleEndian(destination[22..30], (ulong) this.ValueULong);
        bytesWritten += 30;

        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 30)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt8(destination[0..1], (sbyte) this.ValueSByte);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[1..2], (byte) this.ValueByte);
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt16BigEndian(destination[2..4], (short) this.ValueShort);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt16BigEndian(destination[4..6], (ushort) this.ValueUShort);
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt32BigEndian(destination[6..10], (int) this.ValueInt);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt32BigEndian(destination[10..14], (uint) this.ValueUInt);
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt64BigEndian(destination[14..22], (long) this.ValueSLong);
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt64BigEndian(destination[22..30], (ulong) this.ValueULong);
        bytesWritten += 30;

        return true;
    }

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value) => TryReadLittleEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 30)
            return false;
        var ___readValueSByte = (SByteEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt8(source[0..1]);
        var ___readValueByte = (ByteEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]);
        var ___readValueShort = (ShortEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt16LittleEndian(source[2..4]);
        var ___readValueUShort = (UShortEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt16LittleEndian(source[4..6]);
        var ___readValueInt = (IntEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt32LittleEndian(source[6..10]);
        var ___readValueUInt = (UIntEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt32LittleEndian(source[10..14]);
        var ___readValueSLong = (LongEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt64LittleEndian(source[14..22]);
        var ___readValueULong = (ULongEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt64LittleEndian(source[22..30]);
        bytesRead += 30;

        value = new TestObject(___readValueSByte, ___readValueByte, ___readValueShort, ___readValueUShort, ___readValueInt, ___readValueUInt, ___readValueSLong, ___readValueULong);
        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value) => TryReadBigEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 30)
            return false;
        var ___readValueSByte = (SByteEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt8(source[0..1]);
        var ___readValueByte = (ByteEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[1..2]);
        var ___readValueShort = (ShortEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt16BigEndian(source[2..4]);
        var ___readValueUShort = (UShortEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt16BigEndian(source[4..6]);
        var ___readValueInt = (IntEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt32BigEndian(source[6..10]);
        var ___readValueUInt = (UIntEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt32BigEndian(source[10..14]);
        var ___readValueSLong = (LongEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadInt64BigEndian(source[14..22]);
        var ___readValueULong = (ULongEnum) global::Darp.BinaryObjects.Generated.Utilities.ReadUInt64BigEndian(source[22..30]);
        bytesRead += 30;

        value = new TestObject(___readValueSByte, ___readValueByte, ___readValueShort, ___readValueUShort, ___readValueInt, ___readValueUInt, ___readValueSLong, ___readValueULong);
        return true;
    }
}

namespace Darp.BinaryObjects.Generated
{
    using Darp.BinaryObjects;
    using System;
    using System.Buffers.Binary;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    /// <summary>Helper methods used by generated BinaryObjects.</summary>
    [GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    file static class Utilities
    {
        /// <summary> Writes a <c>byte</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt8(Span<byte> destination, byte value)
        {
            destination[0] = value;
        }
        /// <summary> Reads a <c>byte</c> from the given source </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte ReadUInt8(ReadOnlySpan<byte> source)
        {
            return source[0];
        }
        /// <summary> Writes a <c>sbyte</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt8(Span<byte> destination, sbyte value)
        {
            destination[0] = (byte)value;
        }
        /// <summary> Reads a <c>sbyte</c> from the given source </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static sbyte ReadInt8(ReadOnlySpan<byte> source)
        {
            return (sbyte)source[0];
        }
        /// <summary> Writes a <c>ushort</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt16LittleEndian(Span<byte> destination, ushort value)
        {
            BinaryPrimitives.WriteUInt16LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>ushort</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt16BigEndian(Span<byte> destination, ushort value)
        {
            BinaryPrimitives.WriteUInt16BigEndian(destination, value);
        }
        /// <summary> Reads a <c>ushort</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort ReadUInt16LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadUInt16LittleEndian(source);
        }
        /// <summary> Reads a <c>ushort</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ushort ReadUInt16BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadUInt16BigEndian(source);
        }
        /// <summary> Writes a <c>short</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt16LittleEndian(Span<byte> destination, short value)
        {
            BinaryPrimitives.WriteInt16LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>short</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt16BigEndian(Span<byte> destination, short value)
        {
            BinaryPrimitives.WriteInt16BigEndian(destination, value);
        }
        /// <summary> Reads a <c>short</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short ReadInt16LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt16LittleEndian(source);
        }
        /// <summary> Reads a <c>short</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short ReadInt16BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt16BigEndian(source);
        }
        /// <summary> Writes a <c>uint</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt32LittleEndian(Span<byte> destination, uint value)
        {
            BinaryPrimitives.WriteUInt32LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>uint</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt32BigEndian(Span<byte> destination, uint value)
        {
            BinaryPrimitives.WriteUInt32BigEndian(destination, value);
        }
        /// <summary> Reads a <c>uint</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint ReadUInt32LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadUInt32LittleEndian(source);
        }
        /// <summary> Reads a <c>uint</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint ReadUInt32BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadUInt32BigEndian(source);
        }
        /// <summary> Writes a <c>int</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt32LittleEndian(Span<byte> destination, int value)
        {
            BinaryPrimitives.WriteInt32LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>int</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt32BigEndian(Span<byte> destination, int value)
        {
            BinaryPrimitives.WriteInt32BigEndian(destination, value);
        }
        /// <summary> Reads a <c>int</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadInt32LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt32LittleEndian(source);
        }
        /// <summary> Reads a <c>int</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadInt32BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt32BigEndian(source);
        }
        /// <summary> Writes a <c>ulong</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt64LittleEndian(Span<byte> destination, ulong value)
        {
            BinaryPrimitives.WriteUInt64LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>ulong</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt64BigEndian(Span<byte> destination, ulong value)
        {
            BinaryPrimitives.WriteUInt64BigEndian(destination, value);
        }
        /// <summary> Reads a <c>ulong</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong ReadUInt64LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadUInt64LittleEndian(source);
        }
        /// <summary> Reads a <c>ulong</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ulong ReadUInt64BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadUInt64BigEndian(source);
        }
        /// <summary> Writes a <c>long</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt64LittleEndian(Span<byte> destination, long value)
        {
            BinaryPrimitives.WriteInt64LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>long</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt64BigEndian(Span<byte> destination, long value)
        {
            BinaryPrimitives.WriteInt64BigEndian(destination, value);
        }
        /// <summary> Reads a <c>long</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long ReadInt64LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt64LittleEndian(source);
        }
        /// <summary> Reads a <c>long</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long ReadInt64BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt64BigEndian(source);
        }
    }
}
