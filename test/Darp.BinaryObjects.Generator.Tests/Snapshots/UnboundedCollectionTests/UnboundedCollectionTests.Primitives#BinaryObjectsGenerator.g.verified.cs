//HintName: BinaryObjectsGenerator.g.cs
// <auto-generated/>
#nullable enable

/// <remarks> <list type="table">
/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>
/// <item> <term><see cref="Value"/></term> <description>1 * n</description> </item>
/// <item> <term> --- </term> <description>1 * n</description> </item>
/// </list> </remarks>
public sealed partial record TestObject : global::Darp.BinaryObjects.IBinaryObject<TestObject>
{
    /// <inheritdoc />
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public int GetByteCount() => 1 * this.Value.Length;

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 1 * this.Value.Length)
            return false;
        bytesWritten += global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8Span(destination, this.Value.Span);

        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 1 * this.Value.Length)
            return false;
        bytesWritten += global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8Span(destination, this.Value.Span);

        return true;
    }

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value) => TryReadLittleEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        var ___readValue = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8Array(source, out int ___bytesReadValue);
        bytesRead += ___bytesReadValue;

        value = new TestObject(___readValue);
        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value) => TryReadBigEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        var ___readValue = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8Array(source, out int ___bytesReadValue);
        bytesRead += ___bytesReadValue;

        value = new TestObject(___readValue);
        return true;
    }
}

/// <remarks> <list type="table">
/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>
/// <item> <term><see cref="Offset"/></term> <description>1</description> </item>
/// <item> <term><see cref="Value"/></term> <description>4 * n</description> </item>
/// <item> <term> --- </term> <description>1 + 4 * n</description> </item>
/// </list> </remarks>
public sealed partial record TestObjectWithOffset : global::Darp.BinaryObjects.IBinaryObject<TestObjectWithOffset>
{
    /// <inheritdoc />
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public int GetByteCount() => 1 + 4 * this.Value.Length;

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 1)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..1], this.Offset);
        destination = destination[1..];
        bytesWritten += 1;

        if (destination.Length < 4 * this.Value.Length)
            return false;
        bytesWritten += global::Darp.BinaryObjects.Generated.Utilities.WriteUInt32SpanLittleEndian(destination, this.Value);

        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 1)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteUInt8(destination[0..1], this.Offset);
        destination = destination[1..];
        bytesWritten += 1;

        if (destination.Length < 4 * this.Value.Length)
            return false;
        bytesWritten += global::Darp.BinaryObjects.Generated.Utilities.WriteUInt32SpanBigEndian(destination, this.Value);

        return true;
    }

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObjectWithOffset? value) => TryReadLittleEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObjectWithOffset? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 1)
            return false;
        var ___readOffset = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]);
        source = source[1..];
        bytesRead += 1;

        var ___readValue = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt32ArrayLittleEndian(source, out int ___bytesReadValue);
        bytesRead += ___bytesReadValue;

        value = new TestObjectWithOffset(___readOffset, ___readValue);
        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObjectWithOffset? value) => TryReadBigEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObjectWithOffset? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 1)
            return false;
        var ___readOffset = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt8(source[0..1]);
        source = source[1..];
        bytesRead += 1;

        var ___readValue = global::Darp.BinaryObjects.Generated.Utilities.ReadUInt32ArrayBigEndian(source, out int ___bytesReadValue);
        bytesRead += ___bytesReadValue;

        value = new TestObjectWithOffset(___readOffset, ___readValue);
        return true;
    }
}

namespace Darp.BinaryObjects.Generated
{
    using Darp.BinaryObjects;
    using System;
    using System.Buffers.Binary;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    /// <summary>Helper methods used by generated BinaryObjects.</summary>
    [GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    file static class Utilities
    {
        /// <summary> Writes a <c>byte</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteUInt8(Span<byte> destination, byte value)
        {
            destination[0] = value;
        }
        /// <summary> Reads a <c>byte</c> from the given source </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte ReadUInt8(ReadOnlySpan<byte> source)
        {
            return source[0];
        }
        /// <summary> Writes a <c>ReadOnlySpan&lt;byte&gt;</c> with a <c>maxElementLength</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteUInt8Span(Span<byte> destination, ReadOnlySpan<byte> value)
        {
            var length = Math.Min(value.Length, destination.Length);
            value.Slice(0, length).CopyTo(destination);
            return length;
        }
        /// <summary> Reads a <c>byte[]</c> from the given source </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte[] ReadUInt8Array(ReadOnlySpan<byte> source, out int bytesRead)
        {
            bytesRead = source.Length;
            return source.ToArray();
        }
        /// <summary> Writes a <c>ReadOnlySpan&lt;uint&gt;</c> with a <c>maxElementLength</c> to the destination, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteUInt32SpanLittleEndian(Span<byte> destination, ReadOnlySpan<uint> value)
        {
            var length = Math.Min(value.Length, destination.Length / 4);
            if (!BitConverter.IsLittleEndian)
            {
                Span<uint> reinterpretedDestination = MemoryMarshal.Cast<byte, uint>(destination);
                BinaryPrimitives.ReverseEndianness(value[..length], reinterpretedDestination);
                return length * 4;
            }
            MemoryMarshal.Cast<uint, byte>(value[..length]).CopyTo(destination);
            return length * 4;
        }
        /// <summary> Writes a <c>ReadOnlySpan&lt;uint&gt;</c> with a <c>maxElementLength</c> to the destination, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteUInt32SpanBigEndian(Span<byte> destination, ReadOnlySpan<uint> value)
        {
            var length = Math.Min(value.Length, destination.Length / 4);
            if (BitConverter.IsLittleEndian)
            {
                Span<uint> reinterpretedDestination = MemoryMarshal.Cast<byte, uint>(destination);
                BinaryPrimitives.ReverseEndianness(value[..length], reinterpretedDestination);
                return length * 4;
            }
            MemoryMarshal.Cast<uint, byte>(value[..length]).CopyTo(destination);
            return length * 4;
        }
        /// <summary> Reads a <c>uint[]</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint[] ReadUInt32ArrayLittleEndian(ReadOnlySpan<byte> source, out int bytesRead)
        {
            var array = MemoryMarshal.Cast<byte, uint>(source).ToArray();
            if (!BitConverter.IsLittleEndian)
                BinaryPrimitives.ReverseEndianness(array, array);
            bytesRead = array.Length * 4;
            return array;
        }
        /// <summary> Reads a <c>uint[]</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint[] ReadUInt32ArrayBigEndian(ReadOnlySpan<byte> source, out int bytesRead)
        {
            var array = MemoryMarshal.Cast<byte, uint>(source).ToArray();
            if (BitConverter.IsLittleEndian)
                BinaryPrimitives.ReverseEndianness(array, array);
            bytesRead = array.Length * 4;
            return array;
        }
    }
}
