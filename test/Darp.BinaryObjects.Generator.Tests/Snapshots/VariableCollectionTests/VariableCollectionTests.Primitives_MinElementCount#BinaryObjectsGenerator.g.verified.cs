//HintName: BinaryObjectsGenerator.g.cs
// <auto-generated/>
#nullable enable

/// <remarks> <list type="table">
/// <item> <term><b>Field</b></term> <description><b>Byte Length</b></description> </item>
/// <item> <term><see cref="Length"/></term> <description>4</description> </item>
/// <item> <term><see cref="Value"/></term> <description>2 * (1 + <see cref="Length"/> - 1)</description> </item>
/// <item> <term><see cref="Value2"/></term> <description>4 * (3 + n)</description> </item>
/// <item> <term> --- </term> <description>4 + 2 * <see cref="Length"/> + 4 * (3 + n)</description> </item>
/// </list> </remarks>
public sealed partial record TestObject : global::Darp.BinaryObjects.IBinaryObject<TestObject>
{
    /// <inheritdoc />
    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public int GetByteCount() => 4 + 2 * global::System.Math.Max(this.Length, 1) + 4 * global::System.Math.Max(this.Value2.Length, 3);

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination) => TryWriteLittleEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteLittleEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 4)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt32LittleEndian(destination[0..4], this.Length);
        destination = destination[4..];
        bytesWritten += 4;

        if (destination.Length < this.Length || destination.Length < 2)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt16SpanLittleEndian(destination[0..this.Length], this.Value.Span);
        destination = destination[this.Length..];
        bytesWritten += this.Length;

        if (destination.Length < 4 * this.Value2.Length || destination.Length < 12)
            return false;
        bytesWritten += global::Darp.BinaryObjects.Generated.Utilities.WriteInt32SpanLittleEndian(destination, this.Value2);

        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination) => TryWriteBigEndian(destination, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public bool TryWriteBigEndian(global::System.Span<byte> destination, out int bytesWritten)
    {
        bytesWritten = 0;

        if (destination.Length < 4)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt32BigEndian(destination[0..4], this.Length);
        destination = destination[4..];
        bytesWritten += 4;

        if (destination.Length < this.Length || destination.Length < 2)
            return false;
        global::Darp.BinaryObjects.Generated.Utilities.WriteInt16SpanBigEndian(destination[0..this.Length], this.Value.Span);
        destination = destination[this.Length..];
        bytesWritten += this.Length;

        if (destination.Length < 4 * this.Value2.Length || destination.Length < 12)
            return false;
        bytesWritten += global::Darp.BinaryObjects.Generated.Utilities.WriteInt32SpanBigEndian(destination, this.Value2);

        return true;
    }

    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value) => TryReadLittleEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadLittleEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 4)
            return false;
        var ___readLength = global::Darp.BinaryObjects.Generated.Utilities.ReadInt32LittleEndian(source[0..4]);
        source = source[4..];
        bytesRead += 4;

        if (source.Length < ___readLength || source.Length < 2)
            return false;
        var ___readValue = global::Darp.BinaryObjects.Generated.Utilities.ReadInt16ArrayLittleEndian(source[0..___readLength], out _);
        source = source[___readLength..];
        bytesRead += ___readLength;

        if (source.Length < 12)
            return false;
        var ___readValue2 = global::Darp.BinaryObjects.Generated.Utilities.ReadInt32ArrayLittleEndian(source, out int ___bytesReadValue2);
        bytesRead += ___bytesReadValue2;

        value = new TestObject(___readLength, ___readValue, ___readValue2);
        return true;
    }
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value) => TryReadBigEndian(source, out value, out _);
    /// <inheritdoc />
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    public static bool TryReadBigEndian(global::System.ReadOnlySpan<byte> source, [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TestObject? value, out int bytesRead)
    {
        bytesRead = 0;
        value = default;

        if (source.Length < 4)
            return false;
        var ___readLength = global::Darp.BinaryObjects.Generated.Utilities.ReadInt32BigEndian(source[0..4]);
        source = source[4..];
        bytesRead += 4;

        if (source.Length < ___readLength || source.Length < 2)
            return false;
        var ___readValue = global::Darp.BinaryObjects.Generated.Utilities.ReadInt16ArrayBigEndian(source[0..___readLength], out _);
        source = source[___readLength..];
        bytesRead += ___readLength;

        if (source.Length < 12)
            return false;
        var ___readValue2 = global::Darp.BinaryObjects.Generated.Utilities.ReadInt32ArrayBigEndian(source, out int ___bytesReadValue2);
        bytesRead += ___bytesReadValue2;

        value = new TestObject(___readLength, ___readValue, ___readValue2);
        return true;
    }
}

namespace Darp.BinaryObjects.Generated
{
    using Darp.BinaryObjects;
    using System;
    using System.Buffers.Binary;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    /// <summary>Helper methods used by generated BinaryObjects.</summary>
    [GeneratedCodeAttribute("Darp.BinaryObjects.Generator", "GeneratorVersion")]
    file static class Utilities
    {
        /// <summary> Writes a <c>ReadOnlySpan&lt;short&gt;</c> with a <c>maxElementLength</c> to the destination, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteInt16SpanLittleEndian(Span<byte> destination, ReadOnlySpan<short> value)
        {
            var length = Math.Min(value.Length, destination.Length / 2);
            if (!BitConverter.IsLittleEndian)
            {
                Span<short> reinterpretedDestination = MemoryMarshal.Cast<byte, short>(destination);
                BinaryPrimitives.ReverseEndianness(value[..length], reinterpretedDestination);
                return length * 2;
            }
            MemoryMarshal.Cast<short, byte>(value[..length]).CopyTo(destination);
            return length * 2;
        }
        /// <summary> Writes a <c>ReadOnlySpan&lt;short&gt;</c> with a <c>maxElementLength</c> to the destination, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteInt16SpanBigEndian(Span<byte> destination, ReadOnlySpan<short> value)
        {
            var length = Math.Min(value.Length, destination.Length / 2);
            if (BitConverter.IsLittleEndian)
            {
                Span<short> reinterpretedDestination = MemoryMarshal.Cast<byte, short>(destination);
                BinaryPrimitives.ReverseEndianness(value[..length], reinterpretedDestination);
                return length * 2;
            }
            MemoryMarshal.Cast<short, byte>(value[..length]).CopyTo(destination);
            return length * 2;
        }
        /// <summary> Reads a <c>short[]</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short[] ReadInt16ArrayLittleEndian(ReadOnlySpan<byte> source, out int bytesRead)
        {
            var array = MemoryMarshal.Cast<byte, short>(source).ToArray();
            if (!BitConverter.IsLittleEndian)
                BinaryPrimitives.ReverseEndianness(array, array);
            bytesRead = array.Length * 2;
            return array;
        }
        /// <summary> Reads a <c>short[]</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short[] ReadInt16ArrayBigEndian(ReadOnlySpan<byte> source, out int bytesRead)
        {
            var array = MemoryMarshal.Cast<byte, short>(source).ToArray();
            if (BitConverter.IsLittleEndian)
                BinaryPrimitives.ReverseEndianness(array, array);
            bytesRead = array.Length * 2;
            return array;
        }
        /// <summary> Writes a <c>int</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt32LittleEndian(Span<byte> destination, int value)
        {
            BinaryPrimitives.WriteInt32LittleEndian(destination, value);
        }
        /// <summary> Writes a <c>int</c> to the destination </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void WriteInt32BigEndian(Span<byte> destination, int value)
        {
            BinaryPrimitives.WriteInt32BigEndian(destination, value);
        }
        /// <summary> Reads a <c>int</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadInt32LittleEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt32LittleEndian(source);
        }
        /// <summary> Reads a <c>int</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int ReadInt32BigEndian(ReadOnlySpan<byte> source)
        {
            return BinaryPrimitives.ReadInt32BigEndian(source);
        }
        /// <summary> Writes a <c>ReadOnlySpan&lt;int&gt;</c> with a <c>maxElementLength</c> to the destination, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteInt32SpanLittleEndian(Span<byte> destination, ReadOnlySpan<int> value)
        {
            var length = Math.Min(value.Length, destination.Length / 4);
            if (!BitConverter.IsLittleEndian)
            {
                Span<int> reinterpretedDestination = MemoryMarshal.Cast<byte, int>(destination);
                BinaryPrimitives.ReverseEndianness(value[..length], reinterpretedDestination);
                return length * 4;
            }
            MemoryMarshal.Cast<int, byte>(value[..length]).CopyTo(destination);
            return length * 4;
        }
        /// <summary> Writes a <c>ReadOnlySpan&lt;int&gt;</c> with a <c>maxElementLength</c> to the destination, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int WriteInt32SpanBigEndian(Span<byte> destination, ReadOnlySpan<int> value)
        {
            var length = Math.Min(value.Length, destination.Length / 4);
            if (BitConverter.IsLittleEndian)
            {
                Span<int> reinterpretedDestination = MemoryMarshal.Cast<byte, int>(destination);
                BinaryPrimitives.ReverseEndianness(value[..length], reinterpretedDestination);
                return length * 4;
            }
            MemoryMarshal.Cast<int, byte>(value[..length]).CopyTo(destination);
            return length * 4;
        }
        /// <summary> Reads a <c>int[]</c> from the given source, as LittleEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int[] ReadInt32ArrayLittleEndian(ReadOnlySpan<byte> source, out int bytesRead)
        {
            var array = MemoryMarshal.Cast<byte, int>(source).ToArray();
            if (!BitConverter.IsLittleEndian)
                BinaryPrimitives.ReverseEndianness(array, array);
            bytesRead = array.Length * 4;
            return array;
        }
        /// <summary> Reads a <c>int[]</c> from the given source, as BigEndian </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int[] ReadInt32ArrayBigEndian(ReadOnlySpan<byte> source, out int bytesRead)
        {
            var array = MemoryMarshal.Cast<byte, int>(source).ToArray();
            if (BitConverter.IsLittleEndian)
                BinaryPrimitives.ReverseEndianness(array, array);
            bytesRead = array.Length * 4;
            return array;
        }
    }
}
